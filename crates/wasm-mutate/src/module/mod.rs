use std::convert::TryFrom;

use wasm_encoder::{Instruction, ValType};
use wasmparser::{Operator, Type, TypeDef};

#[derive(Debug, Clone)]
pub enum PrimitiveTypeInfo {
    I32,
    I64,
    F32,
    F64,
    // TODO, add others
}
#[derive(Debug, Clone)]
pub struct FuncInfo {
    pub params: Vec<PrimitiveTypeInfo>,
    pub returns: Vec<PrimitiveTypeInfo>,
}

#[derive(Debug, Clone)]
pub enum TypeInfo {
    Func(FuncInfo),
    Instance(),
    Module(),
}

impl TryFrom<Type> for PrimitiveTypeInfo {
    type Error = super::Error;

    fn try_from(value: Type) -> Result<Self, Self::Error> {
        match value {
            wasmparser::Type::I32 => Ok(PrimitiveTypeInfo::I32),
            wasmparser::Type::I64 => Ok(PrimitiveTypeInfo::I64),
            wasmparser::Type::F32 => Ok(PrimitiveTypeInfo::F32),
            wasmparser::Type::F64 => Ok(PrimitiveTypeInfo::F64),
            _ => Err(super::Error::UnsupportedType(value)),
        }
    }
}

impl TryFrom<TypeDef<'_>> for TypeInfo {
    type Error = super::Error;

    fn try_from(value: TypeDef<'_>) -> Result<Self, Self::Error> {
        match value {
            TypeDef::Func(ft) => Ok(TypeInfo::Func(FuncInfo {
                params: ft
                    .params
                    .iter()
                    .map(|&t| PrimitiveTypeInfo::try_from(t).unwrap())
                    .collect(),
                returns: ft
                    .returns
                    .iter()
                    .map(|&t| PrimitiveTypeInfo::try_from(t).unwrap())
                    .collect(),
            })),
            _ => Err(super::Error::UnsupportedTypeDef(format!("{:?}", value))),
        }
    }
}

pub fn map_type(tpe: Type) -> super::Result<ValType>{
    match tpe {
        Type::I32 => Ok(ValType::I32),
        Type::I64 => Ok(ValType::I64),
        Type::F32 => Ok(ValType::F32),
        Type::F64 => Ok(ValType::F64),
        _ => Err(super::Error::NoMutationsAplicable),
    }
}

pub fn map_operator(operator: Operator) -> super::Result<Instruction> {
    match operator {
        Operator::Unreachable => Ok(Instruction::Unreachable),
        Operator::Nop => Ok(Instruction::Nop),
        Operator::Block { ty } => todo!(),
        Operator::Loop { ty } => todo!(),
        Operator::If { ty } => todo!(),
        Operator::Else => Ok(Instruction::Else),
        Operator::Try { ty } => todo!(),
        Operator::Catch { index } => todo!(),
        Operator::Throw { index } => todo!(),
        Operator::Rethrow { relative_depth } => todo!(),
        Operator::End => Ok(Instruction::End),
        Operator::Br { relative_depth } => Ok(Instruction::Br(relative_depth)),
        Operator::BrIf { relative_depth } => Ok(Instruction::BrIf(relative_depth)),
        Operator::BrTable { table } => todo!(),
        Operator::Return => Ok(Instruction::Return),
        Operator::Call { function_index } => Ok(Instruction::Call(function_index)),
        Operator::CallIndirect { index, table_index } => todo!(),
        Operator::ReturnCall { function_index } => todo!(),
        Operator::ReturnCallIndirect { index, table_index } => todo!(),
        Operator::Delegate { relative_depth } => todo!(),
        Operator::CatchAll => todo!(),
        Operator::Drop => Ok(Instruction::Drop),
        Operator::Select => Ok(Instruction::Select),
        Operator::TypedSelect { ty } => todo!(),
        Operator::LocalGet { local_index } => Ok(Instruction::LocalGet(local_index)),
        Operator::LocalSet { local_index } => Ok(Instruction::LocalSet(local_index)),
        Operator::LocalTee { local_index } => Ok(Instruction::LocalTee(local_index)),
        Operator::GlobalGet { global_index } => Ok(Instruction::GlobalGet(global_index)),
        Operator::GlobalSet { global_index } => Ok(Instruction::GlobalSet(global_index)),
        Operator::I32Load { memarg } => todo!(),
        Operator::I64Load { memarg } => todo!(),
        Operator::F32Load { memarg } => todo!(),
        Operator::F64Load { memarg } => todo!(),
        Operator::I32Load8S { memarg } => todo!(),
        Operator::I32Load8U { memarg } => todo!(),
        Operator::I32Load16S { memarg } => todo!(),
        Operator::I32Load16U { memarg } => todo!(),
        Operator::I64Load8S { memarg } => todo!(),
        Operator::I64Load8U { memarg } => todo!(),
        Operator::I64Load16S { memarg } => todo!(),
        Operator::I64Load16U { memarg } => todo!(),
        Operator::I64Load32S { memarg } => todo!(),
        Operator::I64Load32U { memarg } => todo!(),
        Operator::I32Store { memarg } => todo!(),
        Operator::I64Store { memarg } => todo!(),
        Operator::F32Store { memarg } => todo!(),
        Operator::F64Store { memarg } => todo!(),
        Operator::I32Store8 { memarg } => todo!(),
        Operator::I32Store16 { memarg } => todo!(),
        Operator::I64Store8 { memarg } => todo!(),
        Operator::I64Store16 { memarg } => todo!(),
        Operator::I64Store32 { memarg } => todo!(),
        Operator::MemorySize { mem, mem_byte } => todo!(),
        Operator::MemoryGrow { mem, mem_byte } => todo!(),
        Operator::I32Const { value } => Ok(Instruction::I32Const(value)),
        Operator::I64Const { value } => Ok(Instruction::I64Const(value)),
        Operator::F32Const { value } => todo!(),
        Operator::F64Const { value } => todo!(),
        Operator::RefNull { ty } => todo!(),
        Operator::RefIsNull => todo!(),
        Operator::RefFunc { function_index } => todo!(),
        Operator::I32Eqz => Ok(Instruction::I32Eqz),
        Operator::I32Eq => Ok(Instruction::I32Eq),
        Operator::I32Ne => Ok(Instruction::I32Neq),
        Operator::I32LtS => Ok(Instruction::I32LtS),
        Operator::I32LtU => Ok(Instruction::I32Eqz),
        Operator::I32GtS => Ok(Instruction::I32GtS),
        Operator::I32GtU => Ok(Instruction::I32GtU),
        Operator::I32LeS => Ok(Instruction::I32LeS),
        Operator::I32LeU => Ok(Instruction::I32LeU),
        Operator::I32GeS => Ok(Instruction::I32GeS),
        Operator::I32GeU => Ok(Instruction::I32GeU),
        Operator::I64Eqz => Ok(Instruction::I64Eqz),
        Operator::I64Eq => Ok(Instruction::I64Eq),
        Operator::I64Ne => Ok(Instruction::I64Neq),
        Operator::I64LtS => Ok(Instruction::I64LtS),
        Operator::I64LtU => Ok(Instruction::I64LtU),
        Operator::I64GtS => Ok(Instruction::I64GtS),
        Operator::I64GtU => Ok(Instruction::I64GtU),
        Operator::I64LeS => Ok(Instruction::I64LeS),
        Operator::I64LeU => Ok(Instruction::I64LeU),
        Operator::I64GeS => Ok(Instruction::I64GeS),
        Operator::I64GeU => Ok(Instruction::I64GeU),
        Operator::F32Eq => Ok(Instruction::F32Eq),
        Operator::F32Ne => Ok(Instruction::F32Neq),
        Operator::F32Lt => Ok(Instruction::F32Lt),
        Operator::F32Gt => Ok(Instruction::F32Gt),
        Operator::F32Le => Ok(Instruction::F32Le),
        Operator::F32Ge => Ok(Instruction::F32Ge),
        Operator::F64Eq => Ok(Instruction::F64Eq),
        Operator::F64Ne => Ok(Instruction::F64Neq),
        Operator::F64Lt => Ok(Instruction::F64Lt),
        Operator::F64Gt => Ok(Instruction::F64Gt),
        Operator::F64Le => Ok(Instruction::F64Le),
        Operator::F64Ge => Ok(Instruction::F64Ge),
        Operator::I32Clz => Ok(Instruction::I32Clz),
        Operator::I32Ctz => Ok(Instruction::I32Ctz),
        Operator::I32Popcnt => Ok(Instruction::I32Popcnt),
        Operator::I32Add => Ok(Instruction::I32Add),
        Operator::I32Sub => Ok(Instruction::I32Sub),
        Operator::I32Mul => Ok(Instruction::I32Mul),
        Operator::I32DivS => Ok(Instruction::I32DivS),
        Operator::I32DivU => Ok(Instruction::I32DivU),
        Operator::I32RemS => Ok(Instruction::I32RemS),
        Operator::I32RemU => Ok(Instruction::I32RemU),
        Operator::I32And => Ok(Instruction::I32And),
        Operator::I32Or => Ok(Instruction::I32Or),
        Operator::I32Xor => Ok(Instruction::I32Add),
        Operator::I32Shl => Ok(Instruction::I32Shl),
        Operator::I32ShrS => Ok(Instruction::I32ShrS),
        Operator::I32ShrU => Ok(Instruction::I32ShrU),
        Operator::I32Rotl => Ok(Instruction::I32Rotl),
        Operator::I32Rotr => Ok(Instruction::I32Rotr),
        Operator::I64Clz => Ok(Instruction::I64Clz),
        Operator::I64Ctz => Ok(Instruction::I64Ctz),
        Operator::I64Popcnt => Ok(Instruction::I64Popcnt),
        Operator::I64Add => Ok(Instruction::I64Add),
        Operator::I64Sub => Ok(Instruction::I64Sub),
        Operator::I64Mul => Ok(Instruction::I64Mul),
        Operator::I64DivS => Ok(Instruction::I64DivS),
        Operator::I64DivU => Ok(Instruction::I64DivU),
        Operator::I64RemS => Ok(Instruction::I64RemS),
        Operator::I64RemU => Ok(Instruction::I64RemU),
        Operator::I64And => Ok(Instruction::I64And),
        Operator::I64Or => Ok(Instruction::I64Or),
        Operator::I64Xor => Ok(Instruction::I64Xor),
        Operator::I64Shl => Ok(Instruction::I64Shl),
        Operator::I64ShrS => Ok(Instruction::I64ShrS),
        Operator::I64ShrU => Ok(Instruction::I64ShrU),
        Operator::I64Rotl => Ok(Instruction::I64Rotl),
        Operator::I64Rotr => Ok(Instruction::I64Rotr),
        Operator::F32Abs => todo!(),
        Operator::F32Neg => todo!(),
        Operator::F32Ceil => todo!(),
        Operator::F32Floor => todo!(),
        Operator::F32Trunc => todo!(),
        Operator::F32Nearest => todo!(),
        Operator::F32Sqrt => todo!(),
        Operator::F32Add => todo!(),
        Operator::F32Sub => todo!(),
        Operator::F32Mul => todo!(),
        Operator::F32Div => todo!(),
        Operator::F32Min => todo!(),
        Operator::F32Max => todo!(),
        Operator::F32Copysign => todo!(),
        Operator::F64Abs => todo!(),
        Operator::F64Neg => todo!(),
        Operator::F64Ceil => todo!(),
        Operator::F64Floor => todo!(),
        Operator::F64Trunc => todo!(),
        Operator::F64Nearest => todo!(),
        Operator::F64Sqrt => todo!(),
        Operator::F64Add => todo!(),
        Operator::F64Sub => todo!(),
        Operator::F64Mul => todo!(),
        Operator::F64Div => todo!(),
        Operator::F64Min => todo!(),
        Operator::F64Max => todo!(),
        Operator::F64Copysign => todo!(),
        Operator::I32WrapI64 => todo!(),
        Operator::I32TruncF32S => todo!(),
        Operator::I32TruncF32U => todo!(),
        Operator::I32TruncF64S => todo!(),
        Operator::I32TruncF64U => todo!(),
        Operator::I64ExtendI32S => todo!(),
        Operator::I64ExtendI32U => todo!(),
        Operator::I64TruncF32S => todo!(),
        Operator::I64TruncF32U => todo!(),
        Operator::I64TruncF64S => todo!(),
        Operator::I64TruncF64U => todo!(),
        Operator::F32ConvertI32S => todo!(),
        Operator::F32ConvertI32U => todo!(),
        Operator::F32ConvertI64S => todo!(),
        Operator::F32ConvertI64U => todo!(),
        Operator::F32DemoteF64 => todo!(),
        Operator::F64ConvertI32S => todo!(),
        Operator::F64ConvertI32U => todo!(),
        Operator::F64ConvertI64S => todo!(),
        Operator::F64ConvertI64U => todo!(),
        Operator::F64PromoteF32 => todo!(),
        Operator::I32ReinterpretF32 => todo!(),
        Operator::I64ReinterpretF64 => todo!(),
        Operator::F32ReinterpretI32 => todo!(),
        Operator::F64ReinterpretI64 => todo!(),
        Operator::I32Extend8S => todo!(),
        Operator::I32Extend16S => todo!(),
        Operator::I64Extend8S => todo!(),
        Operator::I64Extend16S => todo!(),
        Operator::I64Extend32S => todo!(),
        Operator::I32TruncSatF32S => todo!(),
        Operator::I32TruncSatF32U => todo!(),
        Operator::I32TruncSatF64S => todo!(),
        Operator::I32TruncSatF64U => todo!(),
        Operator::I64TruncSatF32S => todo!(),
        Operator::I64TruncSatF32U => todo!(),
        Operator::I64TruncSatF64S => todo!(),
        Operator::I64TruncSatF64U => todo!(),
        Operator::MemoryInit { segment, mem } => todo!(),
        Operator::DataDrop { segment } => todo!(),
        Operator::MemoryCopy { src, dst } => todo!(),
        Operator::MemoryFill { mem } => todo!(),
        Operator::TableInit { segment, table } => todo!(),
        Operator::ElemDrop { segment } => todo!(),
        Operator::TableCopy { dst_table, src_table } => todo!(),
        Operator::TableFill { table } => todo!(),
        Operator::TableGet { table } => todo!(),
        Operator::TableSet { table } => todo!(),
        Operator::TableGrow { table } => todo!(),
        Operator::TableSize { table } => todo!(),
        Operator::MemoryAtomicNotify { memarg } => todo!(),
        Operator::MemoryAtomicWait32 { memarg } => todo!(),
        Operator::MemoryAtomicWait64 { memarg } => todo!(),
        Operator::AtomicFence { flags } => todo!(),
        Operator::I32AtomicLoad { memarg } => todo!(),
        Operator::I64AtomicLoad { memarg } => todo!(),
        Operator::I32AtomicLoad8U { memarg } => todo!(),
        Operator::I32AtomicLoad16U { memarg } => todo!(),
        Operator::I64AtomicLoad8U { memarg } => todo!(),
        Operator::I64AtomicLoad16U { memarg } => todo!(),
        Operator::I64AtomicLoad32U { memarg } => todo!(),
        Operator::I32AtomicStore { memarg } => todo!(),
        Operator::I64AtomicStore { memarg } => todo!(),
        Operator::I32AtomicStore8 { memarg } => todo!(),
        Operator::I32AtomicStore16 { memarg } => todo!(),
        Operator::I64AtomicStore8 { memarg } => todo!(),
        Operator::I64AtomicStore16 { memarg } => todo!(),
        Operator::I64AtomicStore32 { memarg } => todo!(),
        Operator::I32AtomicRmwAdd { memarg } => todo!(),
        Operator::I64AtomicRmwAdd { memarg } => todo!(),
        Operator::I32AtomicRmw8AddU { memarg } => todo!(),
        Operator::I32AtomicRmw16AddU { memarg } => todo!(),
        Operator::I64AtomicRmw8AddU { memarg } => todo!(),
        Operator::I64AtomicRmw16AddU { memarg } => todo!(),
        Operator::I64AtomicRmw32AddU { memarg } => todo!(),
        Operator::I32AtomicRmwSub { memarg } => todo!(),
        Operator::I64AtomicRmwSub { memarg } => todo!(),
        Operator::I32AtomicRmw8SubU { memarg } => todo!(),
        Operator::I32AtomicRmw16SubU { memarg } => todo!(),
        Operator::I64AtomicRmw8SubU { memarg } => todo!(),
        Operator::I64AtomicRmw16SubU { memarg } => todo!(),
        Operator::I64AtomicRmw32SubU { memarg } => todo!(),
        Operator::I32AtomicRmwAnd { memarg } => todo!(),
        Operator::I64AtomicRmwAnd { memarg } => todo!(),
        Operator::I32AtomicRmw8AndU { memarg } => todo!(),
        Operator::I32AtomicRmw16AndU { memarg } => todo!(),
        Operator::I64AtomicRmw8AndU { memarg } => todo!(),
        Operator::I64AtomicRmw16AndU { memarg } => todo!(),
        Operator::I64AtomicRmw32AndU { memarg } => todo!(),
        Operator::I32AtomicRmwOr { memarg } => todo!(),
        Operator::I64AtomicRmwOr { memarg } => todo!(),
        Operator::I32AtomicRmw8OrU { memarg } => todo!(),
        Operator::I32AtomicRmw16OrU { memarg } => todo!(),
        Operator::I64AtomicRmw8OrU { memarg } => todo!(),
        Operator::I64AtomicRmw16OrU { memarg } => todo!(),
        Operator::I64AtomicRmw32OrU { memarg } => todo!(),
        Operator::I32AtomicRmwXor { memarg } => todo!(),
        Operator::I64AtomicRmwXor { memarg } => todo!(),
        Operator::I32AtomicRmw8XorU { memarg } => todo!(),
        Operator::I32AtomicRmw16XorU { memarg } => todo!(),
        Operator::I64AtomicRmw8XorU { memarg } => todo!(),
        Operator::I64AtomicRmw16XorU { memarg } => todo!(),
        Operator::I64AtomicRmw32XorU { memarg } => todo!(),
        Operator::I32AtomicRmwXchg { memarg } => todo!(),
        Operator::I64AtomicRmwXchg { memarg } => todo!(),
        Operator::I32AtomicRmw8XchgU { memarg } => todo!(),
        Operator::I32AtomicRmw16XchgU { memarg } => todo!(),
        Operator::I64AtomicRmw8XchgU { memarg } => todo!(),
        Operator::I64AtomicRmw16XchgU { memarg } => todo!(),
        Operator::I64AtomicRmw32XchgU { memarg } => todo!(),
        Operator::I32AtomicRmwCmpxchg { memarg } => todo!(),
        Operator::I64AtomicRmwCmpxchg { memarg } => todo!(),
        Operator::I32AtomicRmw8CmpxchgU { memarg } => todo!(),
        Operator::I32AtomicRmw16CmpxchgU { memarg } => todo!(),
        Operator::I64AtomicRmw8CmpxchgU { memarg } => todo!(),
        Operator::I64AtomicRmw16CmpxchgU { memarg } => todo!(),
        Operator::I64AtomicRmw32CmpxchgU { memarg } => todo!(),
        Operator::V128Load { memarg } => todo!(),
        Operator::V128Load8x8S { memarg } => todo!(),
        Operator::V128Load8x8U { memarg } => todo!(),
        Operator::V128Load16x4S { memarg } => todo!(),
        Operator::V128Load16x4U { memarg } => todo!(),
        Operator::V128Load32x2S { memarg } => todo!(),
        Operator::V128Load32x2U { memarg } => todo!(),
        Operator::V128Load8Splat { memarg } => todo!(),
        Operator::V128Load16Splat { memarg } => todo!(),
        Operator::V128Load32Splat { memarg } => todo!(),
        Operator::V128Load64Splat { memarg } => todo!(),
        Operator::V128Load32Zero { memarg } => todo!(),
        Operator::V128Load64Zero { memarg } => todo!(),
        Operator::V128Store { memarg } => todo!(),
        Operator::V128Load8Lane { memarg, lane } => todo!(),
        Operator::V128Load16Lane { memarg, lane } => todo!(),
        Operator::V128Load32Lane { memarg, lane } => todo!(),
        Operator::V128Load64Lane { memarg, lane } => todo!(),
        Operator::V128Store8Lane { memarg, lane } => todo!(),
        Operator::V128Store16Lane { memarg, lane } => todo!(),
        Operator::V128Store32Lane { memarg, lane } => todo!(),
        Operator::V128Store64Lane { memarg, lane } => todo!(),
        Operator::V128Const { value } => todo!(),
        Operator::I8x16Shuffle { lanes } => todo!(),
        Operator::I8x16ExtractLaneS { lane } => todo!(),
        Operator::I8x16ExtractLaneU { lane } => todo!(),
        Operator::I8x16ReplaceLane { lane } => todo!(),
        Operator::I16x8ExtractLaneS { lane } => todo!(),
        Operator::I16x8ExtractLaneU { lane } => todo!(),
        Operator::I16x8ReplaceLane { lane } => todo!(),
        Operator::I32x4ExtractLane { lane } => todo!(),
        Operator::I32x4ReplaceLane { lane } => todo!(),
        Operator::I64x2ExtractLane { lane } => todo!(),
        Operator::I64x2ReplaceLane { lane } => todo!(),
        Operator::F32x4ExtractLane { lane } => todo!(),
        Operator::F32x4ReplaceLane { lane } => todo!(),
        Operator::F64x2ExtractLane { lane } => todo!(),
        Operator::F64x2ReplaceLane { lane } => todo!(),
        Operator::I8x16Swizzle => todo!(),
        Operator::I8x16Splat => todo!(),
        Operator::I16x8Splat => todo!(),
        Operator::I32x4Splat => todo!(),
        Operator::I64x2Splat => todo!(),
        Operator::F32x4Splat => todo!(),
        Operator::F64x2Splat => todo!(),
        Operator::I8x16Eq => todo!(),
        Operator::I8x16Ne => todo!(),
        Operator::I8x16LtS => todo!(),
        Operator::I8x16LtU => todo!(),
        Operator::I8x16GtS => todo!(),
        Operator::I8x16GtU => todo!(),
        Operator::I8x16LeS => todo!(),
        Operator::I8x16LeU => todo!(),
        Operator::I8x16GeS => todo!(),
        Operator::I8x16GeU => todo!(),
        Operator::I16x8Eq => todo!(),
        Operator::I16x8Ne => todo!(),
        Operator::I16x8LtS => todo!(),
        Operator::I16x8LtU => todo!(),
        Operator::I16x8GtS => todo!(),
        Operator::I16x8GtU => todo!(),
        Operator::I16x8LeS => todo!(),
        Operator::I16x8LeU => todo!(),
        Operator::I16x8GeS => todo!(),
        Operator::I16x8GeU => todo!(),
        Operator::I32x4Eq => todo!(),
        Operator::I32x4Ne => todo!(),
        Operator::I32x4LtS => todo!(),
        Operator::I32x4LtU => todo!(),
        Operator::I32x4GtS => todo!(),
        Operator::I32x4GtU => todo!(),
        Operator::I32x4LeS => todo!(),
        Operator::I32x4LeU => todo!(),
        Operator::I32x4GeS => todo!(),
        Operator::I32x4GeU => todo!(),
        Operator::I64x2Eq => todo!(),
        Operator::I64x2Ne => todo!(),
        Operator::I64x2LtS => todo!(),
        Operator::I64x2GtS => todo!(),
        Operator::I64x2LeS => todo!(),
        Operator::I64x2GeS => todo!(),
        Operator::F32x4Eq => todo!(),
        Operator::F32x4Ne => todo!(),
        Operator::F32x4Lt => todo!(),
        Operator::F32x4Gt => todo!(),
        Operator::F32x4Le => todo!(),
        Operator::F32x4Ge => todo!(),
        Operator::F64x2Eq => todo!(),
        Operator::F64x2Ne => todo!(),
        Operator::F64x2Lt => todo!(),
        Operator::F64x2Gt => todo!(),
        Operator::F64x2Le => todo!(),
        Operator::F64x2Ge => todo!(),
        Operator::V128Not => todo!(),
        Operator::V128And => todo!(),
        Operator::V128AndNot => todo!(),
        Operator::V128Or => todo!(),
        Operator::V128Xor => todo!(),
        Operator::V128Bitselect => todo!(),
        Operator::V128AnyTrue => todo!(),
        Operator::I8x16Abs => todo!(),
        Operator::I8x16Neg => todo!(),
        Operator::I8x16Popcnt => todo!(),
        Operator::I8x16AllTrue => todo!(),
        Operator::I8x16Bitmask => todo!(),
        Operator::I8x16NarrowI16x8S => todo!(),
        Operator::I8x16NarrowI16x8U => todo!(),
        Operator::I8x16Shl => todo!(),
        Operator::I8x16ShrS => todo!(),
        Operator::I8x16ShrU => todo!(),
        Operator::I8x16Add => todo!(),
        Operator::I8x16AddSatS => todo!(),
        Operator::I8x16AddSatU => todo!(),
        Operator::I8x16Sub => todo!(),
        Operator::I8x16SubSatS => todo!(),
        Operator::I8x16SubSatU => todo!(),
        Operator::I8x16MinS => todo!(),
        Operator::I8x16MinU => todo!(),
        Operator::I8x16MaxS => todo!(),
        Operator::I8x16MaxU => todo!(),
        Operator::I8x16RoundingAverageU => todo!(),
        Operator::I16x8ExtAddPairwiseI8x16S => todo!(),
        Operator::I16x8ExtAddPairwiseI8x16U => todo!(),
        Operator::I16x8Abs => todo!(),
        Operator::I16x8Neg => todo!(),
        Operator::I16x8Q15MulrSatS => todo!(),
        Operator::I16x8AllTrue => todo!(),
        Operator::I16x8Bitmask => todo!(),
        Operator::I16x8NarrowI32x4S => todo!(),
        Operator::I16x8NarrowI32x4U => todo!(),
        Operator::I16x8ExtendLowI8x16S => todo!(),
        Operator::I16x8ExtendHighI8x16S => todo!(),
        Operator::I16x8ExtendLowI8x16U => todo!(),
        Operator::I16x8ExtendHighI8x16U => todo!(),
        Operator::I16x8Shl => todo!(),
        Operator::I16x8ShrS => todo!(),
        Operator::I16x8ShrU => todo!(),
        Operator::I16x8Add => todo!(),
        Operator::I16x8AddSatS => todo!(),
        Operator::I16x8AddSatU => todo!(),
        Operator::I16x8Sub => todo!(),
        Operator::I16x8SubSatS => todo!(),
        Operator::I16x8SubSatU => todo!(),
        Operator::I16x8Mul => todo!(),
        Operator::I16x8MinS => todo!(),
        Operator::I16x8MinU => todo!(),
        Operator::I16x8MaxS => todo!(),
        Operator::I16x8MaxU => todo!(),
        Operator::I16x8RoundingAverageU => todo!(),
        Operator::I16x8ExtMulLowI8x16S => todo!(),
        Operator::I16x8ExtMulHighI8x16S => todo!(),
        Operator::I16x8ExtMulLowI8x16U => todo!(),
        Operator::I16x8ExtMulHighI8x16U => todo!(),
        Operator::I32x4ExtAddPairwiseI16x8S => todo!(),
        Operator::I32x4ExtAddPairwiseI16x8U => todo!(),
        Operator::I32x4Abs => todo!(),
        Operator::I32x4Neg => todo!(),
        Operator::I32x4AllTrue => todo!(),
        Operator::I32x4Bitmask => todo!(),
        Operator::I32x4ExtendLowI16x8S => todo!(),
        Operator::I32x4ExtendHighI16x8S => todo!(),
        Operator::I32x4ExtendLowI16x8U => todo!(),
        Operator::I32x4ExtendHighI16x8U => todo!(),
        Operator::I32x4Shl => todo!(),
        Operator::I32x4ShrS => todo!(),
        Operator::I32x4ShrU => todo!(),
        Operator::I32x4Add => todo!(),
        Operator::I32x4Sub => todo!(),
        Operator::I32x4Mul => todo!(),
        Operator::I32x4MinS => todo!(),
        Operator::I32x4MinU => todo!(),
        Operator::I32x4MaxS => todo!(),
        Operator::I32x4MaxU => todo!(),
        Operator::I32x4DotI16x8S => todo!(),
        Operator::I32x4ExtMulLowI16x8S => todo!(),
        Operator::I32x4ExtMulHighI16x8S => todo!(),
        Operator::I32x4ExtMulLowI16x8U => todo!(),
        Operator::I32x4ExtMulHighI16x8U => todo!(),
        Operator::I64x2Abs => todo!(),
        Operator::I64x2Neg => todo!(),
        Operator::I64x2AllTrue => todo!(),
        Operator::I64x2Bitmask => todo!(),
        Operator::I64x2ExtendLowI32x4S => todo!(),
        Operator::I64x2ExtendHighI32x4S => todo!(),
        Operator::I64x2ExtendLowI32x4U => todo!(),
        Operator::I64x2ExtendHighI32x4U => todo!(),
        Operator::I64x2Shl => todo!(),
        Operator::I64x2ShrS => todo!(),
        Operator::I64x2ShrU => todo!(),
        Operator::I64x2Add => todo!(),
        Operator::I64x2Sub => todo!(),
        Operator::I64x2Mul => todo!(),
        Operator::I64x2ExtMulLowI32x4S => todo!(),
        Operator::I64x2ExtMulHighI32x4S => todo!(),
        Operator::I64x2ExtMulLowI32x4U => todo!(),
        Operator::I64x2ExtMulHighI32x4U => todo!(),
        Operator::F32x4Ceil => todo!(),
        Operator::F32x4Floor => todo!(),
        Operator::F32x4Trunc => todo!(),
        Operator::F32x4Nearest => todo!(),
        Operator::F32x4Abs => todo!(),
        Operator::F32x4Neg => todo!(),
        Operator::F32x4Sqrt => todo!(),
        Operator::F32x4Add => todo!(),
        Operator::F32x4Sub => todo!(),
        Operator::F32x4Mul => todo!(),
        Operator::F32x4Div => todo!(),
        Operator::F32x4Min => todo!(),
        Operator::F32x4Max => todo!(),
        Operator::F32x4PMin => todo!(),
        Operator::F32x4PMax => todo!(),
        Operator::F64x2Ceil => todo!(),
        Operator::F64x2Floor => todo!(),
        Operator::F64x2Trunc => todo!(),
        Operator::F64x2Nearest => todo!(),
        Operator::F64x2Abs => todo!(),
        Operator::F64x2Neg => todo!(),
        Operator::F64x2Sqrt => todo!(),
        Operator::F64x2Add => todo!(),
        Operator::F64x2Sub => todo!(),
        Operator::F64x2Mul => todo!(),
        Operator::F64x2Div => todo!(),
        Operator::F64x2Min => todo!(),
        Operator::F64x2Max => todo!(),
        Operator::F64x2PMin => todo!(),
        Operator::F64x2PMax => todo!(),
        Operator::I32x4TruncSatF32x4S => todo!(),
        Operator::I32x4TruncSatF32x4U => todo!(),
        Operator::F32x4ConvertI32x4S => todo!(),
        Operator::F32x4ConvertI32x4U => todo!(),
        Operator::I32x4TruncSatF64x2SZero => todo!(),
        Operator::I32x4TruncSatF64x2UZero => todo!(),
        Operator::F64x2ConvertLowI32x4S => todo!(),
        Operator::F64x2ConvertLowI32x4U => todo!(),
        Operator::F32x4DemoteF64x2Zero => todo!(),
        Operator::F64x2PromoteLowF32x4 => todo!(),
        _ => Err(super::Error::NoMutationsAplicable),
    }
}
